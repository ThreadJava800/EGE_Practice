"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый
ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) один камень или увеличить количество
камней в куче в два раза. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре будем
обозначать (10,5). Тогда за один ход можно получить любую из четырёх позиций: (11,5), (20,5), (10,6), (10,10).
Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.

Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается
игрок, сделавший последний ход, т. е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.

1) В начальный момент в первой куче было семь камней, во второй куче — S камней; 1 ≤ S ≤ 69. Известно, что Ваня выиграл
своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна.

2) Найдите все значения S, при которых у Вани есть выигрышная стратегия первым или вторым ходом независимо от того, как
будет ходить Петя.

3) Найдите минимальное значение S, при котором у Вани есть выигрышная стратегия, позволяющая ему выиграть строго вторым
ходом при любой игре Пети;
"""

from functools import lru_cache


def move(h):
    a, b = h
    return (a + 1, b), (a * 2, b), (a, b + 1), (a, b * 2)


@lru_cache(None)
def game(h):
    if sum(h) >= 77:
        return 'W'
    if any(game(m) == 'W' for m in move(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in move(h)):  # for 1) should be any
        return 'V1'
    if any(game(m) == 'V1' for m in move(h)):
        return 'P2'
    """
    # uncomment this block to solve 3)
    # 2) will not work properly with this code!
    # btw, answer there doesn't exist, it`s ok!
    if all(game(m) == 'P2' and game(m) != 'P1' for m in move(h)):
        return 'V2'
    """
    if all(game(m) == 'P1' or game(m) == 'P2' for m in move(h)):
        return 'V12'


if __name__ == '__main__':
    for i in range(1, 70):
        if game((i, 7)) == 'V12':
            print(i)

